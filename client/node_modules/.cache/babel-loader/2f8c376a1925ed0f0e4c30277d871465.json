{"ast":null,"code":"import axios from \"axios\";\nimport { GET_PROFILE_WITH_POSTS_START, GET_PROFILE_WITH_POSTS_SUCCESS, GET_PROFILE_WITH_POSTS_FAILURE, GET_USER_POSTS_START, GET_USER_POSTS_SUCCESS, GET_USER_POSTS_FAILURE, CREATE_POST_START, CREATE_POST_SUCCESS, CREATE_POST_FAILURE, GET_ALL_POSTS_START, GET_ALL_POSTS_SUCCESS, GET_ALL_POSTS_FAILURE, GET_POST_START, GET_POST_SUCCESS, GET_POST_FAILURE, EDIT_POST_START, EDIT_POST_SUCCESS, EDIT_POST_FAILURE, DELETE_POST_START, DELETE_POST_SUCCESS, DELETE_POST_FAILURE } from \"./types\";\nvar baseUrl = \"https://backend-art.herokuapp.com/\"; //FOR POSTS,PUTS,DELETES\n\nvar token = localStorage.getItem(\"token\");\nvar headers = {\n  headers: {\n    authorization: token\n  }\n};\nexport var getProfileWithPosts = function getProfileWithPosts(id) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_PROFILE_WITH_POSTS_START\n    });\n    axios.get(\"\".concat(baseUrl, \"api/users/posts/\").concat(id)).then(function (response) {\n      return dispatch({\n        type: GET_PROFILE_WITH_POSTS_SUCCESS,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: GET_PROFILE_WITH_POSTS_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport var getUserPosts = function getUserPosts(id) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_USER_POSTS_START\n    });\n    axios.get(\"\".concat(baseUrl, \"api/posts/users/\").concat(id)).then(function (response) {\n      return dispatch({\n        type: GET_USER_POSTS_SUCCESS,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: GET_USER_POSTS_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport var createPost = function createPost(post) {\n  return function (dispatch) {\n    console.log('adding');\n    var token = localStorage.getItem('token');\n    var headers = {\n      headers: {\n        authorization: token\n      }\n    };\n    dispatch({\n      type: 'CREATE_POST_START'\n    });\n    axios.post(\"https://backend-art.herokuapp.com/api/posts\", post, headers).then(function (response) {\n      return dispatch({\n        type: 'CREATE_POST_SUCCESS',\n        payload: response.data\n      });\n    }).then(function () {\n      return axios.get(\"https://backend-art.herokuapp.com/api/posts\").then(function (response) {\n        return dispatch({\n          type: 'GET_ALL_POSTS_SUCCESS',\n          payload: response.data\n        });\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: 'GET_ALL_POSTS_FAILURE',\n        payload: error\n      });\n    }).catch(function (error) {\n      return console.log(error.message);\n    });\n  };\n};\nexport var getAllPosts = function getAllPosts() {\n  return function (dispatch) {\n    dispatch({\n      type: GET_ALL_POSTS_START\n    });\n    axios.get(\"https://backend-art.herokuapp.com/api/posts\").then(function (response) {\n      return dispatch({\n        type: GET_ALL_POSTS_SUCCESS,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: GET_ALL_POSTS_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport var getPost = function getPost(id) {\n  return function (dispatch) {\n    dispatch({\n      type: GET_POST_START\n    });\n    axios.get(\"https://backend-art.herokuapp.com/api/posts/\".concat(id)).then(function (response) {\n      return dispatch({\n        type: GET_POST_SUCCESS,\n        payload: response.data\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: GET_POST_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport var editPost = function editPost(id, changes) {\n  return function (dispatch) {\n    var token = localStorage.getItem(\"token\");\n    var headers = {\n      headers: {\n        authorization: token\n      }\n    };\n    dispatch({\n      type: EDIT_POST_START,\n      payload: id\n    });\n    axios.put(\"https://backend-art.herokuapp.com/api/posts/\".concat(id), changes, headers).then(function (response) {\n      return dispatch({\n        type: EDIT_POST_SUCCESS,\n        payload: response.data\n      });\n    }).then(getAllPosts()).catch(function (error) {\n      return dispatch({\n        type: EDIT_POST_FAILURE,\n        payload: error\n      });\n    });\n  };\n};\nexport var deletePost = function deletePost(id) {\n  return function (dispatch) {\n    var token = localStorage.getItem('token');\n    var headers = {\n      headers: {\n        authorization: token\n      }\n    };\n    dispatch({\n      type: 'DELETE_POST_START'\n    });\n    axios.delete(\"https://backend-art.herokuapp.com/api/posts/\".concat(id), headers).then(function (response) {\n      return dispatch({\n        type: 'DELETE_POST_SUCCESS',\n        payload: response.data\n      });\n    }).then(function () {\n      return axios.get(\"https://backend-art.herokuapp.com/api/posts\").then(function (response) {\n        return dispatch({\n          type: 'FETCH_PHOTOS_SUCCESS',\n          payload: response.data\n        });\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: 'FETCH_PHOTOS_FAILURE',\n        payload: error\n      });\n    }).catch(function (error) {\n      return dispatch({\n        type: 'DELETE_POST_FAILURE',\n        payload: error\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/atb/Dev/publicRepos/Front-End-Architect-1/client/src/store/actions/postActions.js"],"names":["axios","GET_PROFILE_WITH_POSTS_START","GET_PROFILE_WITH_POSTS_SUCCESS","GET_PROFILE_WITH_POSTS_FAILURE","GET_USER_POSTS_START","GET_USER_POSTS_SUCCESS","GET_USER_POSTS_FAILURE","CREATE_POST_START","CREATE_POST_SUCCESS","CREATE_POST_FAILURE","GET_ALL_POSTS_START","GET_ALL_POSTS_SUCCESS","GET_ALL_POSTS_FAILURE","GET_POST_START","GET_POST_SUCCESS","GET_POST_FAILURE","EDIT_POST_START","EDIT_POST_SUCCESS","EDIT_POST_FAILURE","DELETE_POST_START","DELETE_POST_SUCCESS","DELETE_POST_FAILURE","baseUrl","token","localStorage","getItem","headers","authorization","getProfileWithPosts","id","dispatch","type","get","then","response","payload","data","catch","error","getUserPosts","createPost","post","console","log","message","getAllPosts","getPost","editPost","changes","put","deletePost","delete"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  GET_PROFILE_WITH_POSTS_START,\n  GET_PROFILE_WITH_POSTS_SUCCESS,\n  GET_PROFILE_WITH_POSTS_FAILURE,\n  GET_USER_POSTS_START,\n  GET_USER_POSTS_SUCCESS,\n  GET_USER_POSTS_FAILURE,\n  CREATE_POST_START,\n  CREATE_POST_SUCCESS,\n  CREATE_POST_FAILURE,\n  GET_ALL_POSTS_START,\n  GET_ALL_POSTS_SUCCESS,\n  GET_ALL_POSTS_FAILURE,\n  GET_POST_START,\n  GET_POST_SUCCESS,\n  GET_POST_FAILURE,\n  EDIT_POST_START,\n  EDIT_POST_SUCCESS,\n  EDIT_POST_FAILURE,\n  DELETE_POST_START,\n  DELETE_POST_SUCCESS,\n  DELETE_POST_FAILURE\n} from \"./types\";\nconst baseUrl = \"https://backend-art.herokuapp.com/\";\n//FOR POSTS,PUTS,DELETES\nconst token = localStorage.getItem(\"token\");\nconst headers = {\n  headers: {\n    authorization: token\n  }\n};\n\nexport const getProfileWithPosts = id => dispatch => {\n  dispatch({ type: GET_PROFILE_WITH_POSTS_START });\n  axios\n    .get(`${baseUrl}api/users/posts/${id}`)\n    .then(response =>\n      dispatch({\n        type: GET_PROFILE_WITH_POSTS_SUCCESS,\n        payload: response.data\n      })\n    )\n    .catch(error =>\n      dispatch({ type: GET_PROFILE_WITH_POSTS_FAILURE, payload: error })\n    );\n};\n\nexport const getUserPosts = id => dispatch => {\n  dispatch({ type: GET_USER_POSTS_START });\n  axios\n    .get(`${baseUrl}api/posts/users/${id}`)\n    .then(response =>\n      dispatch({\n        type: GET_USER_POSTS_SUCCESS,\n        payload: response.data\n      })\n    )\n    .catch(error => dispatch({ type: GET_USER_POSTS_FAILURE, payload: error }));\n};\n\nexport const createPost = post => dispatch => {\n  console.log('adding');\nconst token = localStorage.getItem('token');\nconst headers = {\n    headers: {\n        authorization: token,\n    },\n}\ndispatch({ type: 'CREATE_POST_START' });\naxios\n  .post(\"https://backend-art.herokuapp.com/api/posts\", post, headers)\n  .then(response => \n    dispatch({ type: 'CREATE_POST_SUCCESS', payload: response.data })\n  )\n  .then(() =>       \n  axios.get(\"https://backend-art.herokuapp.com/api/posts\")\n      .then(response =>\n      dispatch({ type: 'GET_ALL_POSTS_SUCCESS', payload: response.data })\n      ))\n      .catch(error => dispatch({ type: 'GET_ALL_POSTS_FAILURE', payload: error }))\n  .catch(error => console.log(error.message));\n};\n\nexport const getAllPosts = () => dispatch => {\n  dispatch({ type: GET_ALL_POSTS_START });\n  axios\n    .get(\"https://backend-art.herokuapp.com/api/posts\")\n    .then(response =>\n      dispatch({\n        type: GET_ALL_POSTS_SUCCESS,\n        payload: response.data\n      })\n    )\n    .catch(error => dispatch({ type: GET_ALL_POSTS_FAILURE, payload: error }));\n};\n\nexport const getPost = id => dispatch => {\n  dispatch({ type: GET_POST_START });\n  axios\n    .get(`https://backend-art.herokuapp.com/api/posts/${id}`)\n    .then(response =>\n      dispatch({\n        type: GET_POST_SUCCESS,\n        payload: response.data\n      })\n    )\n    .catch(error => dispatch({ type: GET_POST_FAILURE, payload: error }));\n};\n\nexport const editPost = (id, changes) => dispatch => {\n  const token = localStorage.getItem(\"token\");\n  const headers = {\n    headers: {\n      authorization: token\n    }\n  };\n  dispatch({ type: EDIT_POST_START, payload: id });\n  axios\n    .put(`https://backend-art.herokuapp.com/api/posts/${id}`, changes, headers)\n    .then(response =>\n      dispatch({ type: EDIT_POST_SUCCESS, payload: response.data })\n    )\n    .then(getAllPosts())\n    .catch(error => dispatch({ type: EDIT_POST_FAILURE, payload: error }));\n};\n\nexport const deletePost = id => dispatch => {\n  const token = localStorage.getItem('token');\n  const headers = {\n      headers: {\n          authorization: token,\n      },\n  }\n  dispatch({ type: 'DELETE_POST_START' });\n  axios\n    .delete(`https://backend-art.herokuapp.com/api/posts/${id}`, headers)\n    .then(response =>\n      dispatch({ type: 'DELETE_POST_SUCCESS', payload: response.data })\n    ).then(() =>       \n          axios.get(\"https://backend-art.herokuapp.com/api/posts\")\n              .then(response =>\n              dispatch({ type: 'FETCH_PHOTOS_SUCCESS', payload: response.data })\n              ))\n              .catch(error => dispatch({ type: 'FETCH_PHOTOS_FAILURE', payload: error }))\n    .catch(error => dispatch({ type: 'DELETE_POST_FAILURE', payload: error }));\n};\n"]},"metadata":{},"sourceType":"module"}